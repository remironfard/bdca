#summary User Manual.

= Functions that work with the EEG struct =

== pop_bdca_mat2labels.m ==

Import the labels from a Matlab variable

{{{
EEG = pop_bdca_mat2labels(EEG,labels)

 input

    labels : can be the name of a variable, or a numeric vector
             with the labels in {0,1}

 output

    EEG.bdca.labels  :  the labels
 
}}}

== pop_bdca_train.m ==

Train a classifier

{{{
synopsis:
 
    EEG = pop_bdca_train(EEG,R,sigma,lt,nut,ls,nus,supportframes,folds)
 
   input:
 
 
   output:
 
 
 
 
  }}}

== pop_bdca_run.m ==

Classify EEG

{{{
Synopsis:

     EEG = pop_bdca_run(EEG)

Output:
 
     EEG.bdca.Ey    : Ey(n)  = E[y(n)]
     EEG.bdca.pot   : pot(n) = pi(Xn)
 
     if G is present (i.e. if you ran POP_BDCA_CONSTRICA)
 
        EEG.bdca.ica.S : Independent "source" across trials. 
 }}}

== pop_bdca_constrica.m ==

EEG = pop_bdca_constrica(EEG,alpha)

----

= Auxiliary functions =  

== bilinlogistregmultigp.m ==

Train a bilinear classifier with Gaussian Process regularization.

{{{
synopsis:
 
     [w0,a,b,Ka,Kb] = bilinlogistregmultigp(x_train,y_train,R,sigw0)
     [w0,a,b,Ka,Kb] = bilinlogistregmultigp(x_train,y_train,R,sigw0,gpa,gpb,spaceunits)
 
  inputs:
 
      x_train  : D-by-T-by-N data
      y_train  : 1-by-N, binary labels in {0,1}
            R  : number of components
        sigw0  : prior stddev of w0
      gpa,gpb  : prior covariance parameters for a and b resp.
                 : if left out, defaults to sigw0.
                 : otherwise, a scalar gives the prior stddev.
                 : otherwise, a vector [sigma l] defines a GP with SE cov. function.
                 : otherwise, a vector [sigma l nu] defines a GP with Matern cov. function
   spaceunits  : (optional) spatial coords in euclidian basis [x y z; x y z; etc].
 
   
    outputs:
 
         w0,a,b : you know.
          Ka,Kb : covariancematrices for a and b respectively.  
 
  Dependencies: OGP, IMMOPTIBOX
}}}

== bilinlogistregmultigp_run.m ==

Classify

{{{
[Ey,pot] = bilinlogistregmultigp_run(x,w0,a,b)
}}}